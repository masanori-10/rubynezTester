#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[1], 2, 3]']
            $expression: #StringExpr['*v1, (a, b) = [1,[2, 3]]; [v1, a, b]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[1], 2, 3]']
            $expression: #StringExpr['*v1,(*), (a, b) = [1,:x,[2, 3]]; [v1, a, b]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[]']
            $expression: #StringExpr['*a = *nil; a']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[nil]']
            $expression: #StringExpr['*a = nil; a']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['2']
            $expression: #StringExpr['a, a = 1, 2; a']
            $expression: #StringExpr['[ruby-dev:31522]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2]']
            $expression: #StringExpr['a, b = 1, 2']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2]']
            $expression: #ParcentNotation['%q{\n  ans = []\n  trace_var(:$a){|v| ans << v}\n  trace_var(:$b){|v| ans << v}\n  $a, $b = 1, 2\n  ans\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  r = :ok\n  :ng.tap {|(r)|}\n  r\n}']
            $expression: #StringExpr['[ruby-dev:31507]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[], nil, nil, nil, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = []\n        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[], 0, nil, nil, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0]\n        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[], 0, 1, nil, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1]\n        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[], 0, 1, 2, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2]\n        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[], 0, 1, 2, 3, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3]\n        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[], 0, 1, 2, 3, 4]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3, 4]\n        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[0], 1, 2, 3, 4, 5]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3, 4, 5]\n        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[0, 1], 2, 3, 4, 5, 6]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3, 4, 5, 6]\n        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[nil, [], nil, nil, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = []\n        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, [], nil, nil, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0]\n        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, [], 1, nil, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1]\n        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, [], 1, 2, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2]\n        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, [], 1, 2, 3, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3]\n        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, [], 1, 2, 3, 4]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3, 4]\n        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, [1], 2, 3, 4, 5]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3, 4, 5]\n        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, [1, 2], 3, 4, 5, 6]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3, 4, 5, 6]\n        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[nil, nil, [], nil, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = []\n        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, nil, [], nil, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0]\n        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, 1, [], nil, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1]\n        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, 1, [], 2, nil, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2]\n        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, 1, [], 2, 3, nil]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3]\n        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, 1, [], 2, 3, 4]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3, 4]\n        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, 1, [2], 3, 4, 5]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3, 4, 5]\n        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0, 1, [2, 3], 4, 5, 6]']
            $expression: #ParcentNotation['%q{\n        ary = [0, 1, 2, 3, 4, 5, 6]\n        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n      }']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  a,s=[],"aaa"\n  300.times { a<<s; s=s.succ }\n  eval <<-END__\n  GC.stress=true\n  Fiber.new do\n    #{ a.join(",") },*zzz=1\n  end.resume\n  END__\n  :ok\n}']
            $expression: #StringExpr['[ruby-dev:32581]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  while true\n    *, z = 1\n    break\n  end\n  :ok\n}']
            $expression: #StringExpr['[ruby-dev:32892]']
         ]
      ]
   ]
   #Comsumed['comsumed']
]
