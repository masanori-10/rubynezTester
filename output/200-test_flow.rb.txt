#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 4, 5, 6, 7, 8]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  [1,2].each{; $a << 2\n    break; $a << 3\n  }; $a << 4\n  begin; $a << 5\n  ensure; $a << 6\n  end; $a << 7\n; $a << 8\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 5, 6, 7, 8]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  begin; $a << 2\n    [1,2].each do; $a << 3\n      break; $a << 4\n    end; $a << 5\n  ensure; $a << 6\n  end; $a << 7\n; $a << 8\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  ["a"].inject("ng"){|x,y|\n    break :ok\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  unless \'\'.respond_to? :lines\n    class String\n      def lines\n        self\n      end\n    end\n  end\n\n  (\'a\').lines.map{|e|\n    break :ok\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 4, 5]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  ["a"].inject("ng"){|x,y|; $a << 2\n    break :ok; $a << 3\n  }; $a << 4\n; $a << 5\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 4, 5]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  (\'a\'..\'b\').map{|e|; $a << 2\n    break :ok; $a << 3\n  }; $a << 4\n; $a << 5\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 5, 7, 8]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  [1,2].each do; $a << 2\n    begin; $a << 3\n      break; $a << 4\n    ensure; $a << 5\n    end; $a << 6\n  end; $a << 7\n; $a << 8\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 5, 6, 9, 10]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  i=0; $a << 2\n  while i<3; $a << 3\n    i+=1; $a << 4\n    begin; $a << 5\n    ensure; $a << 6\n      break; $a << 7\n    end; $a << 8\n  end; $a << 9\n; $a << 10\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 5, 7, 10, 11]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  i=0; $a << 2\n  while i<3; $a << 3\n    i+=1; $a << 4\n    begin; $a << 5\n      raise; $a << 6\n    ensure; $a << 7\n      break; $a << 8\n    end; $a << 9\n  end; $a << 10\n; $a << 11\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 5, 7, 10, 11]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  i=0; $a << 2\n  while i<3; $a << 3\n    i+=1; $a << 4\n    begin; $a << 5\n      raise; $a << 6\n    rescue; $a << 7\n      break; $a << 8\n    end; $a << 9\n  end; $a << 10\n; $a << 11\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 5, 8, 9]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  [1,2].each do; $a << 2\n    begin; $a << 3\n      raise StandardError; $a << 4\n    ensure; $a << 5\n      break; $a << 6\n    end; $a << 7\n  end; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 5, 8, 9]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  [1,2].each do; $a << 2\n    begin; $a << 3\n      raise StandardError; $a << 4\n    rescue; $a << 5\n      break; $a << 6\n    end; $a << 7\n  end; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 6, 8, 10, 11]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  [1,2].each do; $a << 2\n    begin; $a << 3\n      begin; $a << 4\n        break; $a << 5\n      ensure; $a << 6\n      end; $a << 7\n    ensure; $a << 8\n    end; $a << 9\n  end; $a << 10\n; $a << 11\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 3, 4, 5, 6, 7, 8, 10, 13, 3, 4, 5, 6, 7, 8, 10, 13, 14, 15]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  i = 0; $a << 2\n  while i<3; $a << 3\n    i+=1; $a << 4\n    j = 0; $a << 5\n    while j<3; $a << 6\n      j+=1; $a << 7\n      begin; $a << 8\n        raise; $a << 9\n      rescue; $a << 10\n        break; $a << 11\n      end; $a << 12\n    end; $a << 13\n  end; $a << 14\n; $a << 15\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 16, 17]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  i = 0; $a << 2\n  while i<3; $a << 3\n    i+=1; $a << 4\n    j = 0; $a << 5\n    while j<3; $a << 6\n      j+=1; $a << 7\n      1.times{; $a << 8\n        begin; $a << 9\n          raise; $a << 10\n        rescue; $a << 11\n          break; $a << 12\n        end; $a << 13\n      }; $a << 14\n    end; $a << 15\n  end; $a << 16\n; $a << 17\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 3, 4, 5, 6, 7, 8, 10, 13, 3, 4, 5, 6, 7, 8, 10, 13, 14, 15]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  i = 0; $a << 2\n  while i<3; $a << 3\n    i+=1; $a << 4\n    j = 0; $a << 5\n    while j<3; $a << 6\n      j+=1; $a << 7\n      begin; $a << 8\n        raise; $a << 9\n      ensure; $a << 10\n        break; $a << 11\n      end; $a << 12\n    end; $a << 13\n  end; $a << 14\n; $a << 15\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 16, 17]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  i = 0; $a << 2\n  while i<3; $a << 3\n    i+=1; $a << 4\n    j = 0; $a << 5\n    while j<3; $a << 6\n      j+=1; $a << 7\n      1.times{; $a << 8\n        begin; $a << 9\n          raise; $a << 10\n        ensure; $a << 11\n          break; $a << 12\n        end; $a << 13\n      }; $a << 14\n    end; $a << 15\n  end; $a << 16\n; $a << 17\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 5, 8, 9]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  while true; $a << 2\n    begin; $a << 3\n      break; $a << 4\n    ensure; $a << 5\n      break; $a << 6\n    end; $a << 7\n  end; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 5, 99]}']
            $expression: #ParcentNotation['%q{\n$a = [];\nbegin; ; $a << 1\n  while true; $a << 2\n    begin; $a << 3\n      break; $a << 4\n    ensure; $a << 5\n      raise; $a << 6\n    end; $a << 7\n  end; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 6, 8, 9, 10, 11]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  begin; $a << 2\n    [1,2].each do; $a << 3\n      begin; $a << 4\n        break; $a << 5\n      ensure; $a << 6\n      end; $a << 7\n    end; $a << 8\n  ensure; $a << 9\n  end; $a << 10\n; $a << 11\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 4, 99]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  begin; $a << 2\n    raise StandardError; $a << 3\n  ensure; $a << 4\n  end; $a << 5\n; $a << 6\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  begin; $a << 2\n  ensure; $a << 3\n  end ; $a << 4\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 5, 99]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  [1,2].each do; $a << 2\n    begin; $a << 3\n      break; $a << 4\n    ensure; $a << 5\n      raise StandardError; $a << 6\n    end; $a << 7\n  end; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{3}']
            $expression: #ParcentNotation['%q{\n  def m a, b\n    a + b\n  end\n  m(1,\n    while true\n      break 2\n    end\n    )\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{4}']
            $expression: #ParcentNotation['%q{\n  def m a, b\n    a + b\n  end\n  m(1,\n    (i=0; while i<2\n       i+=1\n       class C\n         next 2\n       end\n     end; 3)\n    )\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{34}']
            $expression: #ParcentNotation['%q{\n  def m a, b\n    a+b\n  end\n  m(1, 1.times{break 3}) +\n  m(10, (1.times{next 3}; 20))\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 6, 7]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  3.times{; $a << 2\n    class C; $a << 3\n      break; $a << 4\n    end; $a << 5\n  }; $a << 6\n; $a << 7\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 8, 9]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  3.times{; $a << 2\n    class A; $a << 3\n      class B; $a << 4\n        break; $a << 5\n      end; $a << 6\n    end; $a << 7\n  }; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 2, 3, 2, 3, 6, 7]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  3.times{; $a << 2\n    class C; $a << 3\n      next; $a << 4\n    end; $a << 5\n  }; $a << 6\n; $a << 7\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 2, 3, 4, 2, 3, 4, 8, 9]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  3.times{; $a << 2\n    class C; $a << 3\n      class D; $a << 4\n        next; $a << 5\n      end; $a << 6\n    end; $a << 7\n  }; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 6, 7]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  while true; $a << 2\n    class C; $a << 3\n      break; $a << 4\n    end; $a << 5\n  end; $a << 6\n; $a << 7\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 8, 9]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  while true; $a << 2\n    class C; $a << 3\n      class D; $a << 4\n        break; $a << 5\n      end; $a << 6\n    end; $a << 7\n  end; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 8, 9]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  i=0; $a << 2\n  while i<3; $a << 3\n    i+=1; $a << 4\n    class C; $a << 5\n      next 10; $a << 6\n    end; $a << 7\n  end; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{1}']
            $expression: #ParcentNotation['%q{\n  1.times{\n    while true\n      class C\n        begin\n          break\n        ensure\n          break\n        end\n      end\n    end\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 5, 2, 3, 5, 7, 8]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  [1,2].each do; $a << 2\n    begin; $a << 3\n      next; $a << 4\n    ensure; $a << 5\n    end; $a << 6\n  end; $a << 7\n; $a << 8\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 6, 3, 5, 7, 8]}']
            $expression: #ParcentNotation['%q{$a = []; begin;  ; $a << 1\n  o = "test"; $a << 2\n  def o.test(a); $a << 3\n    return a; $a << 4\n  ensure; $a << 5\n  end; $a << 6\n  o.test(123); $a << 7\n; $a << 8\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 4, 7, 5, 8, 9]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  def m1 *args; $a << 2\n    ; $a << 3\n  end; $a << 4\n  def m2; $a << 5\n    m1(:a, :b, (return 1; :c)); $a << 6\n  end; $a << 7\n  m2; $a << 8\n; $a << 9\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 8, 2, 3, 4, 5, 9, 10]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  def m(); $a << 2\n    begin; $a << 3\n      2; $a << 4\n    ensure; $a << 5\n      return 3; $a << 6\n    end; $a << 7\n  end; $a << 8\n  m; $a << 9\n; $a << 10\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 3, 11, 4, 5, 6, 7, 12, 13]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  def m2; $a << 2\n  end; $a << 3\n  def m(); $a << 4\n    m2(begin; $a << 5\n         2; $a << 6\n       ensure; $a << 7\n         return 3; $a << 8\n       end); $a << 9\n    4; $a << 10\n  end; $a << 11\n  m(); $a << 12\n; $a << 13\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 16, 2, 3, 4, 5, 6, 7, 10, 11, 17, 18]}']
            $expression: #ParcentNotation['%q{$a = []; begin; ; $a << 1\n  def m; $a << 2\n    1; $a << 3\n    1.times{; $a << 4\n      2; $a << 5\n      begin; $a << 6\n        3; $a << 7\n        return; $a << 8\n        4; $a << 9\n      ensure; $a << 10\n        5; $a << 11\n      end; $a << 12\n      6; $a << 13\n    }; $a << 14\n    7; $a << 15\n  end; $a << 16\n  m(); $a << 17\n; $a << 18\n; rescue Exception; $a << 99; end; $a}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:ok, :ok2, :last]}']
            $expression: #ParcentNotation['%q{\n  a = []\n  i = 0\n  begin\n    while i < 1\n      i+=1\n      begin\n        begin\n          next\n        ensure\n          a << :ok\n        end\n      ensure\n        a << :ok2\n      end\n    end\n  ensure\n    a << :last\n  end\n  a\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:ok, :ok2, :last]}']
            $expression: #ParcentNotation['%q{\n  a = []\n  i = 0\n  begin\n    while i < 1\n      i+=1\n      begin\n        begin\n          break\n        ensure\n          a << :ok\n        end\n      ensure\n        a << :ok2\n      end\n    end\n  ensure\n    a << :last\n  end\n  a\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:ok, :ok2, :last]}']
            $expression: #ParcentNotation['%q{\n  a = []\n  i = 0\n  begin\n    while i < 1\n      if i>0\n        break\n      end\n      i+=1\n      begin\n        begin\n          redo\n        ensure\n          a << :ok\n        end\n      ensure\n        a << :ok2\n      end\n    end\n  ensure\n    a << :last\n  end\n  a\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%Q{ENSURE\\n}']
            $expression: #ParcentNotation['%q{\n  def test\n    while true\n      return\n    end\n  ensure\n    puts("ENSURE")\n  end\n  test\n}']
            $expression: #StringExpr['[ruby-dev:37967]']
         ]
      ]
      $statement: #ApplyExpr[
         $recv: #Array[
            $index: #List[
               $expression: #Array[
                  $index: #List[
                     $expression: #StringExpr['[ruby-core:28129]']
                     $expression: #ParcentNotation['%q{\n  class Bug2728\n    include Enumerable\n    define_method(:dynamic_method) do\n      "dynamically defined method"\n    end\n    def each\n      begin\n        yield :foo\n      ensure\n        dynamic_method\n      end\n    end\n  end\n  e = Bug2728.new\n}']
                  ]
               ]
               $expression: #Array[
                  $index: #List[
                     $expression: #StringExpr['[ruby-core:28132]']
                     $expression: #ParcentNotation['%q{\n  class Bug2729\n    include Enumerable\n    def each\n      begin\n        yield :foo\n      ensure\n        proc {}.call\n      end\n    end\n  end\n  e = Bug2729.new\n}']
                  ]
               ]
               $expression: #Array[
                  $index: #List[
                     $expression: #StringExpr['[ruby-core:39125]']
                     $expression: #ParcentNotation['%q{\n  class Bug5234\n    include Enumerable\n    def each\n      begin\n        yield :foo\n      ensure\n        proc\n      end\n    end\n  end\n  e = Bug5234.new\n}']
                  ]
               ]
               $expression: #Array[
                  $index: #List[
                     $expression: #StringExpr['[ruby-dev:45656]']
                     $expression: #ParcentNotation['%q{\n  class Bug6460\n    include Enumerable\n    def each\n      begin\n        yield :foo\n      ensure\n        1.times { Proc.new }\n      end\n    end\n  end\n  e = Bug6460.new\n}']
                  ]
               ]
            ]
         ]
         $recv: #NameExpr['each']
         $body: #Block[
            $param: #MultipleLeftHandSideExpression[
               $item: #NameExpr['bug']
               $item: #NameExpr['src']
            ]
            $body: #List[
               $statement: #ApplyExpr[
                  #Self['self']
                  $recv: #NameExpr['assert_equal']
                  $param: #List[
                     $expression: #StringExpr['foo']
                     $expression: #AddExpr[
                        $left: #NameExpr['src']
                        $right: #ParcentNotation['%q{e.detect {true}}']
                     ]
                     $expression: #NameExpr['bug']
                  ]
               ]
               $statement: #ApplyExpr[
                  #Self['self']
                  $recv: #NameExpr['assert_equal']
                  $param: #List[
                     $expression: #StringExpr['true']
                     $expression: #AddExpr[
                        $left: #NameExpr['src']
                        $right: #ParcentNotation['%q{e.any? {true}}']
                     ]
                     $expression: #NameExpr['bug']
                  ]
               ]
               $statement: #ApplyExpr[
                  #Self['self']
                  $recv: #NameExpr['assert_equal']
                  $param: #List[
                     $expression: #StringExpr['false']
                     $expression: #AddExpr[
                        $left: #NameExpr['src']
                        $right: #ParcentNotation['%q{e.all? {false}}']
                     ]
                     $expression: #NameExpr['bug']
                  ]
               ]
               $statement: #ApplyExpr[
                  #Self['self']
                  $recv: #NameExpr['assert_equal']
                  $param: #List[
                     $expression: #StringExpr['true']
                     $expression: #AddExpr[
                        $left: #NameExpr['src']
                        $right: #ParcentNotation['%q{e.include?(:foo)}']
                     ]
                     $expression: #NameExpr['bug']
                  ]
               ]
            ]
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['foo']
            $expression: #ParcentNotation['%q{\n  class Bug6460\n    def m1\n      m2 {|e|\n        return e\n      }\n    end\n\n    def m2\n      begin\n        yield :foo\n      ensure\n        begin\n          begin\n            yield :foo\n          ensure\n            Proc.new\n            raise \'\'\n          end\n        rescue\n        end\n      end\n    end\n  end\n  Bug6460.new.m1\n}']
            $expression: #StringExpr['[ruby-dev:46372]']
         ]
      ]
   ]
   #Comsumed['comsumed']
]
