#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m() 1 end; m()']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a) a end; m(1)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2]']
            $expression: #StringExpr['def m(a,b) [a, b] end; m(1,2)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2, 3]']
            $expression: #StringExpr['def m(a,b,c) [a, b, c] end; m(1,2,3)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_match']
         $param: #List[
            $expression: #Regex['/\\Awrong number of arguments \\(.*\\b1\\b.* 0\\)\\z/']
            $expression: #ParcentNotation['%q{\n  def m; end\n  begin\n    m(1)\n  rescue => e\n    e.message\n  end\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_match']
         $param: #List[
            $expression: #Regex['/\\Awrong number of arguments \\(.*\\b0\\b.* 1\\)\\z/']
            $expression: #ParcentNotation['%q{\n  def m a; end\n  begin\n    m\n  rescue => e\n    e.message\n  end\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x=1) x end; m()']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x=7) x end; m(1)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,x=1) x end; m(7)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,x=7) x end; m(7,1)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b,x=1) x end; m(7,7)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b,x=7) x end; m(7,7,1)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,x=1,y=1) x end; m(7)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,x=1,y=1) y end; m(7)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,x=7,y=1) x end; m(7,1)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,x=7,y=1) y end; m(7,1)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,x=7,y=7) x end; m(7,1,1)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,x=7,y=7) y end; m(7,1,1)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[]']
            $expression: #StringExpr['def m(*a) a end; m().inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1]']
            $expression: #StringExpr['def m(*a) a end; m(1).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2]']
            $expression: #StringExpr['def m(*a) a end; m(1,2).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[]']
            $expression: #StringExpr['def m(x,*a) a end; m(7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1]']
            $expression: #StringExpr['def m(x,*a) a end; m(7,1).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2]']
            $expression: #StringExpr['def m(x,*a) a end; m(7,1,2).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[]']
            $expression: #StringExpr['def m(x,y,*a) a end; m(7,7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1]']
            $expression: #StringExpr['def m(x,y,*a) a end; m(7,7,1).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2]']
            $expression: #StringExpr['def m(x,y,*a) a end; m(7,7,1,2).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[]']
            $expression: #StringExpr['def m(x,y=7,*a) a end; m(7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[]']
            $expression: #StringExpr['def m(x,y,z=7,*a) a end; m(7,7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[]']
            $expression: #StringExpr['def m(x,y,z=7,*a) a end; m(7,7,7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[]']
            $expression: #StringExpr['def m(x,y,z=7,zz=7,*a) a end; m(7,7,7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[]']
            $expression: #StringExpr['def m(x,y,z=7,zz=7,*a) a end; m(7,7,7,7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,y,z=7,zz=1,*a) zz end; m(7,7,7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,y,z=7,zz=1,*a) zz end; m(7,7,7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,y,z=7,zz=7,*a) zz end; m(7,7,7,1).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Proc']
            $expression: #StringExpr['def m(&block) block end; m{}.class']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #StringExpr['def m(&block) block end; m().inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Proc']
            $expression: #StringExpr['def m(a,&block) block end; m(7){}.class']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #StringExpr['def m(a,&block) block end; m(7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,&block) a end; m(1){}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Proc']
            $expression: #StringExpr['def m(a,b=nil,&block) block end; m(7){}.class']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #StringExpr['def m(a,b=nil,&block) block end; m(7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Proc']
            $expression: #StringExpr['def m(a,b=nil,&block) block end; m(7,7){}.class']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b=nil,&block) b end; m(7,1){}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Proc']
            $expression: #StringExpr['def m(a,b=nil,*c,&block) block end; m(7){}.class']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #StringExpr['def m(a,b=nil,*c,&block) block end; m(7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b=nil,*c,&block) a end; m(1).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b=1,*c,&block) b end; m(7).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b=7,*c,&block) b end; m(7,1).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1]']
            $expression: #StringExpr['def m(a,b=7,*c,&block) c end; m(7,7,1).inspect']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a) a end; m(*[1])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,a) a end; m(7,*[1])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,y,a) a end; m(7,7,*[1])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b) a end; m(*[1,7])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b) b end; m(*[7,1])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,a,b) b end; m(7,*[7,1])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,y,a,b) b end; m(7,7,*[7,1])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b,c) a end; m(*[1,7,7])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b,c) b end; m(*[7,1,7])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(a,b,c) c end; m(*[7,7,1])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,a,b,c) a end; m(7,*[1,7,7])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,y,a,b,c) a end; m(7,7,*[1,7,7])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(h) h end; m(7=>1)[7]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(h) h end; m(7=>1).size']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(h) h end; m(7=>1, 8=>7)[7]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['2']
            $expression: #StringExpr['def m(h) h end; m(7=>1, 8=>7).size']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(h) h end; m(7=>1, 8=>7, 9=>7)[7]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['3']
            $expression: #StringExpr['def m(h) h end; m(7=>1, 8=>7, 9=>7).size']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,h) h end; m(7, 7=>1)[7]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,h) h end; m(7, 7=>1, 8=>7)[7]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,h) h end; m(7, 7=>1, 8=>7, 9=>7)[7]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,y,h) h end; m(7,7, 7=>1)[7]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,y,h) h end; m(7,7, 7=>1, 8=>7)[7]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #StringExpr['def m(x,y,h) h end; m(7,7, 7=>1, 8=>7, 9=>7)[7]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(def m(&block) mm(&block) end\n                           def mm() yield 1 end\n                           m {|a| a })']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(def m(x,&block) mm(x,&block) end\n                           def mm(x) yield 1 end\n                           m(7) {|a| a })']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(def m(x,y,&block) mm(x,y,&block) end\n                           def mm(x,y) yield 1 end\n                           m(7,7) {|a| a })']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(def m(n) n == 0 ? 1 : m(n-1) end; m(5))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; def m() 1 end end;  C.new.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; def m(a) a end end;  C.new.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; def m(a = 1) a end end;  C.new.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1]']
            $expression: #ParcentNotation['%q(class C; def m(*a) a end end;  C.new.m(1).inspect)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def m() mm() end\n                              def mm() 1 end\n                            end\n                            C.new.m )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; def C.m() 1 end end;  C.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; def C.m(a) a end end;  C.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; def C.m(a = 1) a end end;  C.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1]']
            $expression: #ParcentNotation['%q(class C; def C.m(*a) a end end;  C.m(1).inspect)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; end; def C.m() 1 end;  C.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; end; def C.m(a) a end;  C.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; end; def C.m(a = 1) a end;  C.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1]']
            $expression: #ParcentNotation['%q(class C; end; def C.m(*a) a end;  C.m(1).inspect)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; def m() 7 end end; def C.m() 1 end;  C.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def C.m() mm() end\n                              def C.mm() 1 end\n                            end\n                            C.m )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(obj = Object.new; def obj.m() 1 end;  obj.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(obj = Object.new; def obj.m(a) a end;  obj.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(obj = Object.new; def obj.m(a=1) a end;  obj.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1]']
            $expression: #ParcentNotation['%q(obj = Object.new; def obj.m(*a) a end;  obj.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class C; def m() 7 end; end\n                           obj = C.new\n                           def obj.m() 1 end\n                           obj.m)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class A; def m(a) a end end\n                           class B < A; end\n                           B.new.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class A; end\n                           class B < A; def m(a) a end end\n                           B.new.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class A; def m(a) a end end\n                           class B < A; end\n                           class C < B; end\n                           C.new.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class A; def m(a) a end end\n                           module M; end\n                           class B < A; include M; end\n                           B.new.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q(class A; end\n                           module M; def m(a) a end end\n                           class B < A; include M; end\n                           B.new.m(1))']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( def a() 1 end\n                            alias m a\n                            m() )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def a() 1 end\n                              alias m a\n                            end\n                            C.new.m )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def a() 1 end\n                              alias :m a\n                            end\n                            C.new.m )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def a() 1 end\n                              alias m :a\n                            end\n                            C.new.m )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def a() 1 end\n                              alias :m :a\n                            end\n                            C.new.m )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def a() 1 end\n                              alias m a\n                              undef a\n                            end\n                            C.new.m )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def m() end\n                              undef m\n                            end\n                            begin C.new.m; rescue NoMethodError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class A\n                              def m() end\n                            end\n                            class C < A\n                              def m() end\n                              undef m\n                            end\n                            begin C.new.m; rescue NoMethodError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class A; def a() end end   # [yarv-dev:999]\n                            class B < A\n                              def b() end\n                              undef a, b\n                            end\n                            begin B.new.a; rescue NoMethodError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class A; def a() end end   # [yarv-dev:999]\n                            class B < A\n                              def b() end\n                              undef a, b\n                            end\n                            begin B.new.b; rescue NoMethodError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['3']
            $expression: #ParcentNotation['%q{\n  def m1\n    1\n  end\n  alias m2 m1\n  alias :"#{\'m3\'}" m1\n  m1 + m2 + m3\n}']
            $expression: #StringExpr['[ruby-dev:32308]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q{\n  def foobar\n  end\n  undef :"foo#{:bar}"\n  1\n}']
            $expression: #StringExpr['[ruby-dev:32308]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q{\n  def foobar\n    1\n  end\n  alias :"bar#{:baz}" :"foo#{:bar}"\n  barbaz\n}']
            $expression: #StringExpr['[ruby-dev:32308]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def m() mm() end\n                              def mm() 1 end\n                              private :mm\n                            end\n                            C.new.m )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def m() 7 end\n                              private :m\n                            end\n                            begin C.m; rescue NoMethodError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def C.m() mm() end\n                              def C.mm() 1 end\n                              private_class_method :mm\n                            end\n                            C.m )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def C.m() 7 end\n                              private_class_method :m\n                            end\n                            begin C.m; rescue NoMethodError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; def m() 1 end end\n                            C.new.m   # cache\n                            class C\n                              alias mm m; private :mm\n                            end\n                            C.new.m\n                            begin C.new.mm; 7; rescue NoMethodError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def m\n                                def mm() 1 end\n                              end\n                            end\n                            C.new.m\n                            C.new.mm )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def m\n                                def mm() 1 end\n                              end\n                            end\n                            instance_eval "C.new.m; C.new.mm" )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr[':m']
            $expression: #ParcentNotation['%q( class C\n                              def method_missing(mid, *args) mid end\n                            end\n                            C.new.m.inspect )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr[':mm']
            $expression: #ParcentNotation['%q( class C\n                              def method_missing(mid, *args) mid end\n                            end\n                            C.new.mm.inspect )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2]']
            $expression: #ParcentNotation['%q( class C\n                              def method_missing(mid, *args) args end\n                            end\n                            C.new.m(1,2).inspect )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C\n                              def method_missing(mid, *args) yield 1 end\n                            end\n                            C.new.m {|a| a })']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #ParcentNotation['%q( class C\n                              def method_missing(mid, *args, &block) block end\n                            end\n                            C.new.m.inspect )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; def m() 1 end end;\n                            C.new.__send__(:m) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; def m() 1 end end;\n                            C.new.send(:m) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; def m(a) a end end;\n                            C.new.send(:m,1) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; def m(a,b) a end end;\n                            C.new.send(:m,1,7) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; def m(x,a=1) a end end;\n                            C.new.send(:m,7) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; def m(x,a=7) a end end;\n                            C.new.send(:m,7,1) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2]']
            $expression: #ParcentNotation['%q( class C; def m(*a) a end end;\n                            C.new.send(:m,1,2).inspect )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; def m() 7 end; private :m end\n                            begin C.new.public_send(:m); rescue NoMethodError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; def m() 1 end; private :m end\n                            C.new.send(:m) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[[:ok1, :foo], [:ok2, :foo, :bar]]']
            $expression: #ParcentNotation['%q{\n  class C\n    def [](a)\n      $ary << [yield, a]\n    end\n    def []=(a, b)\n      $ary << [yield, a, b]\n    end\n  end\n\n  $ary = []\n  C.new[:foo, &lambda{:ok1}]\n  C.new[:foo, &lambda{:ok2}] = :bar\n  $ary\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[:ok1, [:ok2, 11]]']
            $expression: #ParcentNotation['%q{\n  class C\n    def []\n      $ary << :ok1\n      10\n    end\n    def []=(a)\n      $ary << [:ok2, a]\n    end\n  end\n  $ary = []\n  C.new[]+=1\n  $ary\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[[[:x, :y, :z], NilClass], [[1, :x, :y, :z], NilClass], [[1, 2, :x, :y, :z], NilClass], [[:obj], NilClass], [[1, :obj], NilClass], [[1, 2, :obj], NilClass], [[], Proc], [[1], Proc], [[1, 2], Proc], [[], Proc], [[1], Proc], [[1, 2], Proc], [[:x, :y, :z], Proc], [[1, :x, :y, :z], Proc], [[1, 2, :x, :y, :z], Proc]]}']
            $expression: #ParcentNotation['%q{\ndef m(*args, &b)\n  $result << [args, b.class]\nend\n$result = []\nary = [:x, :y, :z]\nobj = :obj\nb = Proc.new{}\n\nm(*ary)\nm(1,*ary)\nm(1,2,*ary)\nm(*obj)\nm(1,*obj)\nm(1,2,*obj)\nm(){}\nm(1){}\nm(1,2){}\nm(&b)\nm(1,&b)\nm(1,2,&b)\nm(*ary,&b)\nm(1,*ary,&b)\nm(1,2,*ary,&b)\n$result\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['4']
            $expression: #ParcentNotation['%q{class Foo;def []=(a,b,c,d);end;end;Foo.new[1,*a=[2,3]]=4}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['4']
            $expression: #ParcentNotation['%q{class Foo;def []=(a,b,c,d);end;end;def m(&blk)Foo.new[1,*a=[2,3],&blk]=4;end;m{}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, :o1, :o2, [], 3, 4, NilClass, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, :o2, [], 4, 5, NilClass, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [], 5, 6, NilClass, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5], 6, 7, NilClass, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5, 6], 7, 8, NilClass, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7, 8)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5, 6, 7], 8, 9, NilClass, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7, 8, 9)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5, 6, 7, 8], 9, 10, NilClass, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5, 6, 7, 8, 9], 10, 11, NilClass, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, :o1, :o2, [], 3, 4, Proc, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, :o2, [], 4, 5, Proc, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [], 5, 6, Proc, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5], 6, 7, Proc, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5, 6], 7, 8, Proc, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7, 8){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5, 6, 7], 8, 9, Proc, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7, 8, 9){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5, 6, 7, 8], 9, 10, Proc, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7, 8, 9, 10){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [5, 6, 7, 8, 9], 10, 11, Proc, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\nend\n; m(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, :o1, :o2, [], 3, 4, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, x, y]\nend\n; m(1, 2, 3, 4)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, :o2, [], 4, 5, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, x, y]\nend\n; m(1, 2, 3, 4, 5)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3, 4, [], 5, 6, nil, nil]}']
            $expression: #ParcentNotation['%q{\ndef m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2)\n  x, y = :x, :y if $foo\n  [m1, m2, o1, o2, r, p1, p2, x, y]\nend\n; m(1, 2, 3, 4, 5, 6)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, :o1, :o2, 3, 4]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, p1, p2); super; end; end\n; C1.new.m(1,2,3,4)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, :o2, 4, 5]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4, 5, 6]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5,6)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, :o]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r; super; end; end\n; C1.new.m 1}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r; super; end; end\n; C1.new.m 1, 2}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r; super; end; end\n; C1.new.m 1, 2, 3}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r; super; end; end\n; C1.new.m 1, 2, 3, 4}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [:a]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a\n    a = :a; super; end; end\n; C1.new.m 1}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4, 5]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4, 5, 6]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5,6)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4, 5, 6, 7]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5,6,7)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4, 5, 6, 7, 8]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5,6,7,8)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, :o]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r, &b; super; end; end\n; C1.new.m 1}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r, &b; super; end; end\n; C1.new.m 1, 2}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r, &b; super; end; end\n; C1.new.m 1, 2, 3}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r, &b; super; end; end\n; C1.new.m 1, 2, 3, 4}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, :o]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r, &b; super; end; end\n; C1.new.m(1){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r, &b; super; end; end\n; C1.new.m(1, 2){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r, &b; super; end; end\n; C1.new.m(1, 2, 3){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o, *r, &b; super; end; end\n; C1.new.m(1, 2, 3, 4){}}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, :x]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o\n    o = :x; super; end; end\n; C1.new.m 1}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, :x]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o\n    o = :x; super; end; end\n; C1.new.m 1, 2}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [:a, :o]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o\n    a = :a; super; end; end\n; C1.new.m 1}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [:a, 2]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o\n    a = :a; super; end; end\n; C1.new.m 1, 2}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a; super; end; end\n; C1.new.m 1}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, :x, :y]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, *r\n    r = [:x, :y]; super; end; end\n; C1.new.m 1}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, :x, :y]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, *r\n    r = [:x, :y]; super; end; end\n; C1.new.m 1, 2}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, :x, :y]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, *r\n    r = [:x, :y]; super; end; end\n; C1.new.m 1, 2, 3}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, :o1, :o2, 3, 4]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, :o2, 4, 5]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4, 5, 6]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5,6)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4, 5, 6, 7]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5,6,7)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4, 5, 6, 7, 8]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5,6,7,8)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3, 4, 5, 6, 7, 8, 9]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n; C1.new.m(1,2,3,4,5,6,7,8,9)}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, *r; super; end; end\n; C1.new.m 1}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, *r; super; end; end\n; C1.new.m 1, 2}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2, 3]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, *r; super; end; end\n; C1.new.m 1, 2, 3}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, []]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m; super; end; end\n; C1.new.m}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, :o]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o; super; end; end\n; C1.new.m 1}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[:C0_m, [1, 2]]}']
            $expression: #ParcentNotation['%q{\nclass C0; def m *args; [:C0_m, args]; end; end\nclass C1 < C0; def m a, o=:o; super; end; end\n; C1.new.m 1, 2}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class C\n    def x=(n)\n    end\n    def m\n      self.x = :ok\n    end\n  end\n  C.new.m\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  proc{\n    $SAFE = 1\n    class C\n      def m\n        :ok\n      end\n    end\n  }.call\n  C.new.m\n}']
            $expression: #StringExpr['[ruby-core:11998]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class B\n    def m() :fail end\n  end\n  class C < B\n    undef m\n    begin\n      remove_method :m\n    rescue NameError\n    end\n  end\n  begin\n    C.new.m\n  rescue NameError\n    :ok\n  end\n}']
            $expression: #StringExpr['[ruby-dev:31816], [ruby-dev:31817]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_normal_exit']
         $param: #List[
            $expression: #ParcentNotation['%q{\n  begin\n    Process.setrlimit(Process::RLIMIT_STACK, 4_206_592)\n    # FreeBSD SEGVs this less than 4M + 12K bytes.\n  rescue Exception\n    exit\n  end\n  class C\n    attr "a" * (10*1024*1024)\n  end\n}']
            $expression: #StringExpr['[ruby-dev:31818]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class Module\n    def define_method2(name, &block)\n      define_method(name, &block)\n    end\n  end\n  class C\n    define_method2(:m) {|x, y| :fail }\n  end\n  begin\n    C.new.m([1,2])\n  rescue ArgumentError\n    :ok\n  end\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_not_match']
         $param: #List[
            $expression: #Regex['/method_missing/']
            $expression: #ParcentNotation['%q{\n  STDERR.reopen(STDOUT)\n  variable_or_mehtod_not_exist\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[false, false, false, false, true, true]']
            $expression: #ParcentNotation['%q{\n  class C\n    define_method(:foo) {\n      block_given?\n    }\n  end\n\n  C.new.foo {}\n\n  class D\n    def foo\n      D.module_eval{\n        define_method(:m1){\n          block_given?\n        }\n      }\n    end\n    def bar\n      D.module_eval{\n        define_method(:m2){\n          block_given?\n        }\n      }\n    end\n  end\n\n  D.new.foo\n  D.new.bar{}\n  [C.new.foo, C.new.foo{}, D.new.m1, D.new.m1{}, D.new.m2, D.new.m2{}]\n}']
            $expression: #StringExpr['[ruby-core:14813]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class Foo\n    define_method(:foo) do |&b|\n      b.call\n    end\n  end\n  Foo.new.foo do\n    break :ok\n  end\n}']
            $expression: #StringExpr['[ruby-dev:36028]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, 2, [3, 4]]']
            $expression: #ParcentNotation['%q{\n  def regular(a, b, *c)\n    [a, b, c]\n  end\n  regular(*[], 1, *[], *[2, 3], *[], 4)\n}']
            $expression: #StringExpr['[ruby-core:19413]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[1, [:foo, 3, 4, :foo]]']
            $expression: #ParcentNotation['%q{\n  def regular(a, *b)\n    [a, b]\n  end\n  a = b = [:foo]\n  regular(1, *a, *[3, 4], *b)\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['["B", "A"]']
            $expression: #ParcentNotation['%q{\n  class A\n    def m\n      \'A\'\n    end\n  end\n\n  class B < A\n    define_method(:m) do\n      [\'B\', super()]\n    end\n  end\n\n  class C < B\n  end\n\n  C.new.m\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  module Foo\n    def foo\n      begin\n        super\n      rescue NoMethodError\n        :ok\n      end\n    end\n    module_function :foo\n  end\n  Foo.foo\n}']
            $expression: #StringExpr['[ruby-dev:37587]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Object#foo']
            $expression: #ParcentNotation['%q{\n  class Object\n    def self.foo\n      "Object.foo"\n    end\n    def foo\n      "Object#foo"\n    end\n  end\n\n  module Foo\n    def foo\n      begin\n        super\n      rescue NoMethodError\n        :ok\n      end\n    end\n    module_function :foo\n  end\n  Foo.foo\n}']
            $expression: #StringExpr['[ruby-dev:37587]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_normal_exit']
         $param: #List[
            $expression: #ParcentNotation['%q{\n  class BasicObject\n    remove_method :method_missing\n  end\n  begin\n    "a".lalala!\n  rescue NoMethodError => e\n    e.message == "undefined method `lalala!\' for \\"a\\":String" ? :ok : :ng\n  end\n}']
            $expression: #StringExpr['[ruby-core:22298]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  "hello"[0] ||= "H"\n  "ok"\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  "hello"[0, 1] ||= "H"\n  "ok"\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class C\n    define_method(:foo) do\n      C.class_eval { remove_method(:foo) }\n      super()\n    end\n  end\n  begin\n    C.new.foo\n  rescue NoMethodError\n    \'ok\'\n  end\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  [0][0, &proc{}] += 21\n  \'ok\'\n}']
            $expression: #StringExpr['[ruby-core:30534]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class C\n    attr_reader :a\n    def initialize\n      @a = 1\n    end\n  end\n\n  def m *args\n    C.new.a(*args)\n  end\n\n  m()\n  begin\n    m(1)\n  rescue ArgumentError\n    \'ok\'\n  end\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['DC']
            $expression: #ParcentNotation['%q{\n  $result = []\n\n  class C\n    def foo *args\n      $result << \'C\'\n    end\n  end\n  class D\n    def foo *args\n      $result << \'D\'\n    end\n  end\n\n  o1 = $o1 = C.new\n  o2 = $o2 = D.new\n\n  args = Object.new\n  def args.to_a\n    test1 $o2, nil\n    []\n  end\n  def test1 o, args\n    o.foo(*args)\n  end\n  test1 o1, args\n  $result.join\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['DC']
            $expression: #ParcentNotation['%q{\n  $result = []\n\n  class C\n    def foo *args\n      $result << \'C\'\n    end\n  end\n  class D\n    def foo *args\n      $result << \'D\'\n    end\n  end\n\n  o1 = $o1 = C.new\n  o2 = $o2 = D.new\n\n  block = Object.new\n  def block.to_proc\n    test2 $o2, %w(a, b, c), nil\n    Proc.new{}\n  end\n  def test2 o, args, block\n    o.foo(*args, &block)\n  end\n  test2 o1, [], block\n  $result.join\n}']
         ]
      ]
   ]
   #Comsumed['comsumed']
]
