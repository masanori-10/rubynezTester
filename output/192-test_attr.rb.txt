#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  module M\n    class A\n      class << self\n        attr_accessor :at\n        def workflow_rule\n          yield self\n        end\n\n        def eval_str(str)\n          eval(str)\n        end\n      end\n    end\n  end\n  begin\n    M::A.eval_str(<<-END)\n    workflow_rule do |r|\n      r.at 1\n    end\n    END\n  rescue ArgumentError => e\n    print "ok"\n  end\n}']
            $expression: #StringExpr['[ruby-core:14641]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%{ok}']
            $expression: #ParcentNotation['%{\n  class A\n    attr :m\n  end\n  begin\n    A.new.m(3)\n  rescue ArgumentError => e\n    print "ok"\n  end\n}']
            $expression: #StringExpr['[ruby-core:15120]']
         ]
      ]
   ]
   #Comsumed['comsumed']
]
