#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  File.unlink(\'zzz.rb\') if File.file?(\'zzz.rb\')\n  instance_eval do\n    autoload :ZZZ, \'./zzz.rb\'\n    begin\n      ZZZ\n    rescue LoadError\n      :ok\n    end\n  end\n}']
            $expression: #StringExpr['[ruby-dev:43816]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  open(\'zzz.rb\', \'w\') {|f| f.puts \'\' }\n  instance_eval do\n    autoload :ZZZ, \'./zzz.rb\'\n    begin\n      ZZZ\n    rescue NameError\n      :ok\n    end\n  end\n}']
            $expression: #StringExpr['[ruby-dev:43816]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  open(\'zzz.rb\', \'w\') {|f| f.puts \'class ZZZ; def self.ok;:ok;end;end\'}\n  instance_eval do\n    autoload :ZZZ, \'./zzz.rb\'\n    ZZZ.ok\n  end\n}']
            $expression: #StringExpr['[ruby-dev:43816]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  open("zzz.rb", "w") {|f| f.puts "class ZZZ; def self.ok;:ok;end;end"}\n  autoload :ZZZ, "./zzz.rb"\n  ZZZ.ok\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  open("zzz.rb", "w") {|f| f.puts "class ZZZ; def self.ok;:ok;end;end"}\n  autoload :ZZZ, "./zzz.rb"\n  require "./zzz.rb"\n  ZZZ.ok\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['okok']
            $expression: #ParcentNotation['%q{\n  open("zzz.rb", "w") {|f| f.puts "class ZZZ; def self.ok;:ok;end;end"}\n  autoload :ZZZ, "./zzz.rb"\n  t1 = Thread.new {ZZZ.ok}\n  t2 = Thread.new {ZZZ.ok}\n  [t1.value, t2.value].join\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_finish']
         $param: #List[
            $expression: #IntExpr['5']
            $expression: #ParcentNotation['%q{\n  autoload :ZZZ, File.expand_path(__FILE__)\n  begin\n    ZZZ\n  rescue NameError\n  end\n}']
            $expression: #StringExpr['[ruby-core:21696]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['A::C']
            $expression: #ParcentNotation['%q{\n  open("zzz.rb", "w") {}\n  class A\n    autoload :C, "./zzz"\n    class C\n    end\n    C\n  end\n}']
         ]
      ]
   ]
   #Comsumed['comsumed']
]
