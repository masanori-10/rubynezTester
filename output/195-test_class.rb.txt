#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['true']
            $expression: #ParcentNotation['%q( class C; end\n                            Object.const_defined?(:C) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class C; end\n                            C.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['C']
            $expression: #ParcentNotation['%q( class C; end\n                            C.name )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['C']
            $expression: #ParcentNotation['%q( class C; end\n                            C.new.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['C']
            $expression: #ParcentNotation['%q( class C; end\n                            C.new.class.name )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class C; end\n                            C.new.class.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['true']
            $expression: #ParcentNotation['%q( Object.__send__(:remove_const, :TrueClass)\n                            GC.start\n                            true.inspect)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['false']
            $expression: #ParcentNotation['%q( Object.__send__(:remove_const, :FalseClass)\n                            GC.start\n                            false.inspect)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #ParcentNotation['%q( Object.__send__(:remove_const, :NilClass)\n                            GC.start\n                            nil.inspect)']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['true']
            $expression: #ParcentNotation['%q( class A; end\n                            class C < A; end\n                            Object.const_defined?(:C) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class A; end\n                            class C < A; end\n                            C.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['C']
            $expression: #ParcentNotation['%q( class A; end\n                            class C < A; end\n                            C.name )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['C']
            $expression: #ParcentNotation['%q( class A; end\n                            class C < A; end\n                            C.new.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['C']
            $expression: #ParcentNotation['%q( class A; end\n                            class C < A; end\n                            C.new.class.name )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class A; end\n                            class C < A; end\n                            C.new.class.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['true']
            $expression: #ParcentNotation['%q( module M; end\n                            Object.const_defined?(:M) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Module']
            $expression: #ParcentNotation['%q( module M; end\n                            M.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['M']
            $expression: #ParcentNotation['%q( module M; end\n                            M.name )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['C']
            $expression: #ParcentNotation['%q( module M; end\n                            class C; include M; end\n                            C.new.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['A::B']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            A::B )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['A::B']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            A::B.name )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['A::B']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            A::B.new.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            A::B.new.class.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['A::B::C']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            class A::B::C; end\n                            A::B::C )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['A::B::C']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            class A::B::C; end\n                            A::B::C.name )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            class A::B::C; end\n                            A::B::C.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['A::B::C']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            class A::B::C; end\n                            A::B::C.new.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            class A::B::C; end\n                            A::B::C.new.class.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['A::B2']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            class A::B2 < A::B; end\n                            A::B2 )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class A; end\n                            class A::B; end\n                            class A::B2 < A::B; end\n                            A::B2.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['true']
            $expression: #ParcentNotation['%q( class C; end;  c1 = ::C\n                            class C; end;  c2 = ::C\n                            c1.equal?(c2) )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; end\n                            class A; end\n                            begin class C < A; end; rescue TypeError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class C; end\n                            begin module C; end; rescue TypeError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( C = 1   # [yarv-dev:782]\n                            begin class C; end; rescue TypeError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( C = 1   # [yarv-dev:800]\n                            begin module C; end; rescue TypeError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( class A; end;  A::C = 1;  A::C )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( A = 7;  begin A::C = 7; rescue TypeError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q( begin 7::C = 7; rescue TypeError; 1 end )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['C']
            $expression: #ParcentNotation['%q( class A; class ::C; end end;  C )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class A; class ::C; end end;  C.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['OK']
            $expression: #ParcentNotation['%q( class A; ::C = "OK"; end;  C )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['String']
            $expression: #ParcentNotation['%q( class A; ::C = "OK"; end;  C.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Class']
            $expression: #ParcentNotation['%q( class C; end;  C.dup.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['Module']
            $expression: #ParcentNotation['%q( module M; end;  M.dup.class )']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  module Foo\n  end\n\n  begin\n    def foo(&b)\n      Foo.module_eval &b\n    end\n    foo{\n      def bar\n      end\n    }\n    bar()\n  rescue NameError\n    :ok\n  end\n}']
            $expression: #StringExpr['[ruby-core:14378]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['3']
            $expression: #ParcentNotation['%q{\n  $i = 0\n  class C\n    def self.const_missing *args\n      $i+=1\n    end\n  end\n\n  3.times{\n    C::FOO\n  }\n  $i\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_match']
         $param: #List[
            $expression: #Regex['/::C\\z/']
            $expression: #ParcentNotation['%q{\n  c = nil\n  Module.new{|m| c = class m::C; name; end}\n  c\n}']
            $expression: #StringExpr['[ruby-dev:38456]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_normal_exit']
         $param: #List[
            $expression: #ParcentNotation['%q{\n  s = Symbol.dup\n  class << s\n  end\n  s.allocate.to_s\n}']
            $expression: #StringExpr['[ruby-core:30843]']
         ]
      ]
   ]
   #Comsumed['comsumed']
]
