#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['require']
         $param: #List[
            $expression: #StringExpr['test/unit']
         ]
      ]
      $statement: #Class[
         $name: #NameExpr['TestISO8859']
         $super: #Field[
            $recv: #Field[
               $recv: #NameExpr['Test']
               $name: #NameExpr['Unit']
            ]
            $name: #NameExpr['TestCase']
         ]
         $body: #BlockExpr[
            $main: #List[
               $statement: #AssignExpr[
                  $left: #NameExpr['ASSERTS']
                  $right: #ParcentNotation['%q(\n    assert_match(/^(\\xdf)\\1$/i, "\\xdf\\xdf")\n    assert_match(/^(\\xdf)\\1$/i, "ssss")\n    # assert_match(/^(\\xdf)\\1$/i, "\\xdfss") # this must be bug...\n    assert_match(/^[\\xdfz]+$/i, "sszzsszz")\n    assert_match(/^SS$/i, "\\xdf")\n    assert_match(/^Ss$/i, "\\xdf")\n    ((0xc0..0xde).to_a - [0xd7]).each do |c|\n      c1 = c.chr("ENCODING")\n      c2 = (c + 0x20).chr("ENCODING")\n      assert_match(/^(#{ c1 })\\1$/i, c2 + c1)\n      assert_match(/^(#{ c2 })\\1$/i, c1 + c2)\n      assert_match(/^[#{ c1 }]+$/i, c2 + c1)\n      assert_match(/^[#{ c2 }]+$/i, c1 + c2)\n    end\n    assert_match(/^\\xff$/i, "\\xff")\n  )']
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_1']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #AddExpr[
                              $left: #StringExpr['# encoding: iso8859-1\\n']
                              $right: #ApplyExpr[
                                 $recv: #NameExpr['ASSERTS']
                                 $recv: #NameExpr['gsub']
                                 $param: #List[
                                    $expression: #Regex['/ENCODING/m']
                                    $expression: #StringExpr['iso8859-1']
                                 ]
                              ]
                           ]
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_2']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #AddExpr[
                              $left: #StringExpr['# encoding: iso8859-2\\n']
                              $right: #ApplyExpr[
                                 $recv: #NameExpr['ASSERTS']
                                 $recv: #NameExpr['gsub']
                                 $param: #List[
                                    $expression: #Regex['/ENCODING/m']
                                    $expression: #StringExpr['iso8859-2']
                                 ]
                              ]
                           ]
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_3']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #ParcentNotation['%q(# encoding: iso8859-3\n      assert_match(/^(\\xdf)\\1$/i, "\\xdf\\xdf")\n      assert_match(/^(\\xdf)\\1$/i, "ssss")\n      assert_match(/^[\\xdfz]+$/i, "sszzsszz")\n      assert_match(/^SS$/i, "\\xdf")\n      assert_match(/^Ss$/i, "\\xdf")\n      [0xa1, 0xa6, *(0xaa..0xac), 0xaf].each do |c|\n        c1 = c.chr("iso8859-3")\n        c2 = (c + 0x10).chr("iso8859-3")\n        assert_match(/^(#{ c1 })\\1$/i, c2 + c1)\n        assert_match(/^(#{ c2 })\\1$/i, c1 + c2)\n        assert_match(/^[#{ c1 }]+$/i, c2 + c1)\n        assert_match(/^[#{ c2 }]+$/i, c1 + c2)\n      end\n      ([*(0xc0..0xde)] - [0xc3, 0xd0, 0xd7]).each do |c|\n        c1 = c.chr("iso8859-3")\n        c2 = (c + 0x20).chr("iso8859-3")\n        assert_match(/^(#{ c1 })\\1$/i, c2 + c1)\n        assert_match(/^(#{ c2 })\\1$/i, c1 + c2)\n        assert_match(/^[#{ c1 }]+$/i, c2 + c1)\n        assert_match(/^[#{ c2 }]+$/i, c1 + c2)\n      end\n    )']
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_4']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #AddExpr[
                              $left: #StringExpr['# encoding: iso8859-4\\n']
                              $right: #ApplyExpr[
                                 $recv: #NameExpr['ASSERTS']
                                 $recv: #NameExpr['gsub']
                                 $param: #List[
                                    $expression: #Regex['/ENCODING/m']
                                    $expression: #StringExpr['iso8859-4']
                                 ]
                              ]
                           ]
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_5']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #ParcentNotation['%q(# encoding: iso8859-5\n      (0xb0..0xcf).each do |c|\n        c1 = c.chr("iso8859-5")\n        c2 = (c + 0x20).chr("iso8859-5")\n        assert_match(/^(#{ c1 })\\1$/i, c2 + c1)\n        assert_match(/^(#{ c2 })\\1$/i, c1 + c2)\n        assert_match(/^[#{ c1 }]+$/i, c2 + c1)\n        assert_match(/^[#{ c2 }]+$/i, c1 + c2)\n      end\n      ((0xa1..0xaf).to_a - [0xad]).each do |c|\n        c1 = c.chr("iso8859-5")\n        c2 = (c + 0x50).chr("iso8859-5")\n        assert_match(/^(#{ c1 })\\1$/i, c2 + c1)\n        assert_match(/^(#{ c2 })\\1$/i, c1 + c2)\n        assert_match(/^[#{ c1 }]+$/i, c2 + c1)\n        assert_match(/^[#{ c2 }]+$/i, c1 + c2)\n      end\n    )']
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_6']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #ParcentNotation['%q(# encoding: iso8859-6\n      [0xa4, 0xac, 0xbb, 0xbf, *(0xc1..0xda), *(0xe0..0xf2)].each do |c|\n        c1 = c.chr("iso8859-6")\n        assert_match(/^(#{ c1 })\\1$/i, c1 * 2)\n      end\n    )']
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_7']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #ParcentNotation['%q(# encoding: iso8859-7\n      ((0xa0..0xfe).to_a - [0xae, 0xd2]).each do |c|\n        c1 = c.chr("iso8859-7")\n        assert_match(/^(#{ c1 })\\1$/i, c1 * 2)\n      end\n      ((0xc1..0xd9).to_a - [0xd2]).each do |c|\n        c1 = c.chr("iso8859-7")\n        c2 = (c + 0x20).chr("iso8859-7")\n        assert_match(/^(#{ c1 })\\1$/i, c2 + c1)\n        assert_match(/^(#{ c2 })\\1$/i, c1 + c2)\n        assert_match(/^[#{ c1 }]+$/i, c2 + c1)\n        assert_match(/^[#{ c2 }]+$/i, c1 + c2)\n      end\n    )']
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_8']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #ParcentNotation['%q(# encoding: iso8859-8\n      [0xa0, *(0xa2..0xbe), *(0xdf..0xfa), 0xfc, 0xfd].each do |c|\n        c1 = c.chr("iso8859-8")\n        assert_match(/^(#{ c1 })\\1$/i, c1 * 2)\n      end\n    )']
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_9']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #ParcentNotation['%q(# encoding: iso8859-9\n      assert_match(/^(\\xdf)\\1$/i, "\\xdf\\xdf")\n      assert_match(/^(\\xdf)\\1$/i, "ssss")\n      assert_match(/^[\\xdfz]+$/i, "sszzsszz")\n      assert_match(/^SS$/i, "\\xdf")\n      assert_match(/^Ss$/i, "\\xdf")\n      ([*(0xc0..0xde)] - [0xd7, 0xdd]).each do |c|\n        c1 = c.chr("iso8859-9")\n        c2 = (c + 0x20).chr("iso8859-9")\n        assert_match(/^(#{ c1 })\\1$/i, c2 + c1)\n        assert_match(/^(#{ c2 })\\1$/i, c1 + c2)\n        assert_match(/^[#{ c1 }]+$/i, c2 + c1)\n        assert_match(/^[#{ c2 }]+$/i, c1 + c2)\n      end\n    )']
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_10']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #AddExpr[
                              $left: #StringExpr['# encoding: iso8859-10\\n']
                              $right: #ApplyExpr[
                                 $recv: #NameExpr['ASSERTS']
                                 $recv: #NameExpr['gsub']
                                 $param: #List[
                                    $expression: #Regex['/ENCODING/m']
                                    $expression: #StringExpr['iso8859-10']
                                 ]
                              ]
                           ]
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_11']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #ParcentNotation['%q(# encoding: iso8859-11\n      [*(0xa0..0xda), *(0xdf..0xfb)].each do |c|\n        c1 = c.chr("iso8859-11")\n        assert_match(/^(#{ c1 })\\1$/i, c1 * 2)\n      end\n    )']
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_13']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #AddExpr[
                              $left: #StringExpr['# encoding: iso8859-13\\n']
                              $right: #ApplyExpr[
                                 $recv: #NameExpr['ASSERTS']
                                 $recv: #NameExpr['gsub']
                                 $param: #List[
                                    $expression: #Regex['/ENCODING/m']
                                    $expression: #StringExpr['iso8859-13']
                                 ]
                              ]
                           ]
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_14']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #AddExpr[
                              $left: #StringExpr['# encoding: iso8859-14\\n']
                              $right: #ApplyExpr[
                                 $recv: #NameExpr['ASSERTS']
                                 $recv: #NameExpr['gsub']
                                 $param: #List[
                                    $expression: #Regex['/ENCODING/m']
                                    $expression: #StringExpr['iso8859-14']
                                 ]
                              ]
                           ]
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_15']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #AddExpr[
                              $left: #StringExpr['# encoding: iso8859-15\\n']
                              $right: #ApplyExpr[
                                 $recv: #NameExpr['ASSERTS']
                                 $recv: #NameExpr['gsub']
                                 $param: #List[
                                    $expression: #Regex['/ENCODING/m']
                                    $expression: #StringExpr['iso8859-15']
                                 ]
                              ]
                           ]
                        ]
                     ]
                  ]
               ]
               $statement: #FuncDecl[
                  $name: #NameExpr['test_iso_8859_16']
                  $param: #List['']
                  $body: #BlockExpr[
                     $main: #ApplyExpr[
                        #Self['self']
                        $recv: #NameExpr['eval']
                        $param: #List[
                           $expression: #AddExpr[
                              $left: #StringExpr['# encoding: iso8859-16\\n']
                              $right: #ApplyExpr[
                                 $recv: #NameExpr['ASSERTS']
                                 $recv: #NameExpr['gsub']
                                 $param: #List[
                                    $expression: #Regex['/ENCODING/m']
                                    $expression: #StringExpr['iso8859-16']
                                 ]
                              ]
                           ]
                        ]
                     ]
                  ]
               ]
            ]
         ]
      ]
   ]
   #Comsumed['comsumed']
]
