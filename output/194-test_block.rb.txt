#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{1}']
            $expression: #ParcentNotation['%q{\n  1.times{\n    begin\n      a = 1\n    ensure\n      foo = nil\n    end\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{2}']
            $expression: #ParcentNotation['%q{\n  [1,2,3].find{|x| x == 2}\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{2}']
            $expression: #ParcentNotation['%q{\n  class E\n    include Enumerable\n    def each(&block)\n      [1, 2, 3].each(&block)\n    end\n  end\n  E.new.find {|x| x == 2 }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{6}']
            $expression: #ParcentNotation['%q{\n  sum = 0\n  for x in [1, 2, 3]\n    sum += x\n  end\n  sum\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{15}']
            $expression: #ParcentNotation['%q{\n  sum = 0\n  for x in (1..5)\n    sum += x\n  end\n  sum\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{0}']
            $expression: #ParcentNotation['%q{\n  sum = 0\n  for x in []\n    sum += x\n  end\n  sum\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{1}']
            $expression: #ParcentNotation['%q{\n  ans = []\n  1.times{\n    for n in 1..3\n      a = n\n      ans << a\n    end\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{1..3}']
            $expression: #ParcentNotation['%q{\n  ans = []\n  for m in 1..3\n    for n in 1..3\n      a = [m, n]\n      ans << a\n    end\n  end\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3]}']
            $expression: #ParcentNotation['%q{\n  (1..3).to_a\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[4, 8, 12]}']
            $expression: #ParcentNotation['%q{\n  (1..3).map{|e|\n    e * 4\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, 3]}']
            $expression: #ParcentNotation['%q{\n  class C\n    include Enumerable\n    def each\n      [1,2,3].each{|e|\n        yield e\n      }\n    end\n  end\n\n  C.new.to_a\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[4, 5, 6]}']
            $expression: #ParcentNotation['%q{\n  class C\n    include Enumerable\n    def each\n      [1,2,3].each{|e|\n        yield e\n      }\n    end\n  end\n\n  C.new.map{|e|\n    e + 3\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{100}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield\n  end\n  def n\n    yield\n  end\n\n  m{\n    n{\n      100\n    }\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{20}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield 1\n  end\n\n  m{|ib|\n    m{|jb|\n      i = 20\n    }\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{2}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield 1\n  end\n\n  m{|ib|\n    m{|jb|\n      ib = 20\n      kb = 2\n    }\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{3}']
            $expression: #ParcentNotation['%q{\n  def iter1\n    iter2{\n      yield\n    }\n  end\n\n  def iter2\n    yield\n  end\n\n  iter1{\n    jb = 2\n    iter1{\n      jb = 3\n    }\n    jb\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{2}']
            $expression: #ParcentNotation['%q{\n  def iter1\n    iter2{\n      yield\n    }\n  end\n\n  def iter2\n    yield\n  end\n\n  iter1{\n    jb = 2\n    iter1{\n      jb\n    }\n    jb\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{2}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield 1\n  end\n  m{|ib|\n    ib*2\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{92580}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield 12345, 67890\n  end\n  m{|ib,jb|\n    ib*2+jb\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[10, nil]}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 10\n  end\n\n  a = nil\n  [iter{|a|\n    a\n  }, a]\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{21}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 10\n  end\n\n  iter{|a|\n    iter{|a|\n      a + 1\n    } + a\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[10, 20, 30, 40, nil, nil, nil, nil]}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 10, 20, 30, 40\n  end\n\n  a = b = c = d = nil\n  iter{|a, b, c, d|\n    [a, b, c, d]\n  } + [a, b, c, d]\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[10, 20, 30, 40, nil, nil]}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 10, 20, 30, 40\n  end\n\n  a = b = nil\n  iter{|a, b, c, d|\n    [a, b, c, d]\n  } + [a, b]\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1]}']
            $expression: #ParcentNotation['%q{\n  $a = []\n\n  def iter\n    yield 1\n  end\n\n  def m\n    x = iter{|x|\n      $a << x\n      y = 0\n    }\n  end\n  m\n  $a\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, [2]]}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 1, 2\n  end\n\n  iter{|a, *b|\n    [a, b]\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[[1, 2]]}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 1, 2\n  end\n\n  iter{|*a|\n    [a]\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, []]}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 1, 2\n  end\n\n  iter{|a, b, *c|\n    [a, b, c]\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2, nil, []]}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 1, 2\n  end\n\n  iter{|a, b, c, *d|\n    [a, b, c, d]\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{1}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield\n  end\n  m{\n    1\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{15129}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield 123\n  end\n  m{|ib|\n    m{|jb|\n      ib*jb\n    }\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{2}']
            $expression: #ParcentNotation['%q{\n  def m a\n    yield a\n  end\n  m(1){|ib|\n    m(2){|jb|\n      ib*jb\n    }\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{9}']
            $expression: #ParcentNotation['%q{\n  sum = 0\n  3.times{|ib|\n    2.times{|jb|\n      sum += ib + jb\n    }}\n  sum\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{10}']
            $expression: #ParcentNotation['%q{\n  3.times{|bl|\n    break 10\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 2]}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 1,2,3\n  end\n\n  iter{|i, j|\n    [i, j]\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, nil]}']
            $expression: #ParcentNotation['%q{\n  def iter\n    yield 1\n  end\n\n  iter{|i, j|\n    [i, j]\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['0']
            $expression: #ParcentNotation['%q{\ndef m()\nend\nm {|(v0,*,(*)),|}\nm {|(*v0,(*)),|}\nm {|(v0,*v1,(*)),|}\nm {|((v0,*v1,v2)),|}\nm {|(v0,*v1,v2),|}\nm {|(v0,*v1,(v2)),|}\nm {|((*),*v0,v1),|}\nm {|((v0),*v1,v2),|}\nm {|(v0,v1,*v2,v3),|}\nm {|v0,(v1,*v2,v3),|}\nm {|(v0,*v1,v2),v3,|}\nm {|(v0,*v1,v2)|}\nm {|(v0,*v1,v2),&v3|}\nm {|(v0,*v1,v2),*|}\nm {|(v0,*v1,v2),*,&v3|}\nm {|*,(v0,*v1,v2)|}\nm {|*,(v0,*v1,v2),&v3|}\nm {|v0,*,(v1,*v2,v3)|}\nm {|v0,*,(v1,*v2,v3),&v4|}\nm {|(v0,*v1,v2),*,v3|}\nm {|(v0,*v1,v2),*,v3,&v4|}\nm {|(v0, *v1, v2)|}\nm {|(*,v)|}\n0\n}']
            $expression: #StringExpr['block parameter (shouldn\'t SEGV: [ruby-dev:31143])']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #ParcentNotation['%q{\n  def m\n    yield\n  end\n  m{|&b| b}.inspect\n}']
            $expression: #StringExpr['[ruby-dev:31147]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #ParcentNotation['%q{\n  def m()\n    yield\n  end\n  m {|(v,(*))|}.inspect\n}']
            $expression: #StringExpr['[ruby-dev:31160]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #ParcentNotation['%q{\n  def m()\n    yield\n  end\n  m {|(*,a,b)|}.inspect\n}']
            $expression: #StringExpr['[ruby-dev:31153]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['nil']
            $expression: #ParcentNotation['%q{\n  def m()\n    yield\n  end\n  m {|((*))|}.inspect\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{[1, 1, [1, nil], [1, nil], [1, nil], [1, nil], [1, 1], 1, [1, nil], [1, nil], [1, nil], [1, nil], [[1, 1], [1, 1]], [1, 1], [1, 1], [1, 1], [1, nil], [1, nil], [[[1, 1], [1, 1]], [[1, 1], [1, 1]]], [[1, 1], [1, 1]], [[1, 1], [1, 1]], [[1, 1], [1, 1]], [1, 1], [1, 1], [[[[1, 1], [1, 1]], [[1, 1], [1, 1]]], [[[1, 1], [1, 1]], [[1, 1], [1, 1]]]], [[[1, 1], [1, 1]], [[1, 1], [1, 1]]], [[[1, 1], [1, 1]], [[1, 1], [1, 1]]], [[[1, 1], [1, 1]], [[1, 1], [1, 1]]], [[1, 1], [1, 1]], [[1, 1], [1, 1]]]}']
            $expression: #ParcentNotation['%q{\ndef m(ary = [])\n  yield(ary)\nend\n\n$ans = []\no = 1\n5.times{\n  v,(*) = o; $ans << o\n  m(o){|(v,(*))| $ans << v}\n  ((x, y)) = o; $ans << [x, y]\n  m(o){|((x, y))| $ans << [x, y]}\n  (((x, y))) = o; $ans << [x, y]\n  m(o){|(((x, y)))| $ans << [x, y]}\n  o = [o, o]\n}; $ans\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['0']
            $expression: #ParcentNotation['%q{\n  def m()\n    yield [0]\n  end\n  m {|*,v| v}.inspect\n}']
            $expression: #StringExpr['[ruby-dev:31437]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[0]']
            $expression: #ParcentNotation['%q{\n  def m\n    yield [0]\n  end\n  m{|v, &b| v}.inspect\n}']
            $expression: #StringExpr['[ruby-dev:31440]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  begin\n    lambda{|a|}.call(1, 2)\n  rescue ArgumentError\n    :ok\n  else\n    :ng\n  end\n}']
            $expression: #StringExpr['[ruby-dev:31464]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  begin\n    lambda{|&b|}.call(3)\n  rescue ArgumentError\n    :ok\n  else\n    :ng\n  end\n}']
            $expression: #StringExpr['[ruby-dev:31472]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class C\n    def each\n      yield [1,2]\n      yield 1,2\n    end\n  end\n  vs1 = []\n  C.new.each {|*v| vs1 << v }\n  vs2 = []\n  C.new.to_enum.each {|*v| vs2 << v }\n  vs1 == vs2 ? :ok : :ng\n}']
            $expression: #StringExpr['[ruby-dev:32329]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_normal_exit']
         $param: #List[
            $expression: #ParcentNotation['%q{\n  e = [1,2,3].each\n  10000.times {\n    e = [e].each\n  }\n  Thread.new { GC.start }.join\n}']
            $expression: #StringExpr['[ruby-dev:32604]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['[nil, []]']
            $expression: #ParcentNotation['%q{\n  def m() yield nil,[] end\n  l = lambda {|*v| v}\n  GC.stress=true\n  r = m(&l)\n  GC.stress=false\n  r.inspect\n}']
            $expression: #StringExpr['[ruby-dev:32567]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ApplyExpr[
               $recv: #NameExpr['NilClass']
               $recv: #NameExpr['to_s']
            ]
            $expression: #ParcentNotation['%q{\n  r = false; 1.times{|&b| r = b}; r.class\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class C\n    define_method(:foo) do |arg, &block|\n      if block then block.call else arg end\n    end\n  end\n  C.new.foo("ng") {"ok"}\n}']
            $expression: #StringExpr['[ruby-talk:266422]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class C\n    define_method(:xyz) do |o, k, &block|\n      block.call(o, k)\n    end\n  end\n  C.new.xyz("o","k") {|o, k| o+k}\n}']
            $expression: #StringExpr['[ruby-core:20544]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class C\n    define_method(:xyz) do |*args, &block|\n      block.call(*args)\n    end\n  end\n  C.new.xyz("o","k") {|*args| args.join("")}\n}']
            $expression: #StringExpr['[ruby-core:20544]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  STDERR.reopen(STDOUT)\n  class C\n    define_method(:foo) do |&block|\n      block.call if block\n    end\n    result = "ng"\n    new.foo() {result = "ok"}\n    result\n  end\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  class Bar\n    def bar; :ok; end\n  end\n  def foo\n    yield(Bar.new) if block_given?\n  end\n  foo(&:bar)\n}']
            $expression: #StringExpr['[ruby-core:14279]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_normal_exit']
         $param: #List[
            $expression: #ParcentNotation['%q{\n  class Controller\n    def respond_to(&block)\n      responder = Responder.new\n      block.call(responder)\n      responder.respond\n    end\n    def test_for_bug\n      respond_to{|format|\n        format.js{\n          puts "in test"\n          render{|obj|\n            puts obj\n          }\n        }\n      }\n    end\n    def render(&block)\n      puts "in render"\n    end\n  end\n\n  class Responder\n    def method_missing(symbol, &block)\n      puts "enter method_missing"\n      @response = Proc.new{\n        puts \'in method missing\'\n        block.call\n      }\n      puts "leave method_missing"\n    end\n    def respond\n      @response.call\n    end\n  end\n  t = Controller.new\n  t.test_for_bug\n}']
            $expression: #StringExpr['[ruby-core:14395]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['true']
            $expression: #ParcentNotation['%q{\n  class C0\n    def foo\n      block_given?\n    end\n  end\n\n  class C1 < C0\n    def foo\n      super\n    end\n  end\n\n  C1.new.foo{}\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['true']
            $expression: #ParcentNotation['%q{\n  class C0\n    def foo\n      block_given?\n    end\n  end\n\n  class C1 < C0\n    def foo\n      super()\n    end\n  end\n\n  C1.new.foo{}\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  1.times do\n    begin\n      raise\n    rescue\n      begin\n        raise\n      rescue\n        break\n      end\n    end\n  end\n  \'ok\'\n}']
         ]
      ]
   ]
   #Comsumed['comsumed']
]
