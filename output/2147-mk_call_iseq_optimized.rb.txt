#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['puts']
         $param: #List[
            $expression: #HereDocument['#if 1 /* enable or disable this optimization */\n\n/* DO NOT EDIT THIS FILE DIRECTLY\n *\n * This file is generated by tool/mkcall_iseq.rb\n */\n\n']
         ]
      ]
      $statement: #AssignExpr[
         $left: #NameExpr['P']
         $right: #ClosedRange[
            #IntExpr['0']
            #IntExpr['3']
         ]
      ]
      $statement: #AssignExpr[
         $left: #NameExpr['L']
         $right: #ClosedRange[
            #IntExpr['0']
            #IntExpr['5']
         ]
      ]
      $statement: #FuncDecl[
         $name: #NameExpr['fname']
         $param: #List[
            $param: #Param[
               $param: #NameExpr['param']
            ]
            $param: #Param[
               $param: #NameExpr['local']
            ]
         ]
         $body: #BlockExpr[
            $main: #StringExpr[
               $inner: #NameExpr['param']
               $inner: #NameExpr['local']
            ]
         ]
      ]
      $statement: #ApplyExpr[
         $recv: #NameExpr['P']
         $recv: #NameExpr['each']
         $body: #Block[
            $param: #NameExpr['param']
            $body: #ApplyExpr[
               $recv: #NameExpr['L']
               $recv: #NameExpr['each']
               $body: #Block[
                  $param: #NameExpr['local']
                  $body: #ApplyExpr[
                     #Self['self']
                     $recv: #NameExpr['puts']
                     $param: #List[
                        $expression: #HereDocument['static VALUE\n#{fname(param, local)}(rb_thread_t *th, rb_control_frame_t *cfp, struct rb_calling_info *calling, const struct rb_call_info *ci, struct rb_call_cache *cc)\n{\n    return vm_call_iseq_setup_normal(th, cfp, calling, ci, cc, 0, #{param}, #{local});\n}\n\n']
                     ]
                  ]
               ]
            ]
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['puts']
         $param: #List[
            $expression: #HereDocument['/* vm_call_iseq_handlers[param][local] */\nstatic const vm_call_handler vm_call_iseq_handlers[][#{L.to_a.size}] = {\n#{P.map{|param| \'{\' + L.map{|local| fname(param, local)}.join(",\\n ") + \'}\'}.join(",\\n")}\n};\n\nstatic inline vm_call_handler\nvm_call_iseq_setup_func(const struct rb_call_info *ci, const int param_size, const int local_size)\n{\n    if (UNLIKELY(ci->flag & VM_CALL_TAILCALL)) {\n\treturn &vm_call_iseq_setup_tailcall_0start;\n    }\n    else if (0) { /* to disable optimize */\n        return &vm_call_iseq_setup_normal_0start;\n    }\n    else {\n\tif (param_size <= #{P.end} &&\n\t    local_size <= #{L.end}) {\n\t    VM_ASSERT(local_size >= 0);\n\t    return vm_call_iseq_handlers[param_size][local_size];\n\t}\n\treturn &vm_call_iseq_setup_normal_0start;\n    }\n}\n\n#else\n\n\nstatic inline vm_call_handler\nvm_call_iseq_setup_func(const struct rb_call_info *ci, struct rb_call_cache *cc)\n{\n    if (UNLIKELY(ci->flag & VM_CALL_TAILCALL)) {\n\treturn &vm_call_iseq_setup_tailcall_0start;\n    }\n    else {\n        return &vm_call_iseq_setup_normal_0start;\n    }\n}\n#endif\n']
         ]
      ]
   ]
   #Comsumed['comsumed']
]
