#Source[
   #List[
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  def m\n    :ng1\n    mm{\n      yield\n    }\n    :ng2\n  end\n\n  def mm\n    :ng3\n    yield\n    :ng4\n  end\n\n  m{\n    break :ok\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  3.times{\n    break :ok\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{}']
            $expression: #ParcentNotation['%q{\n  catch(:foo){\n    throw :foo\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{false}']
            $expression: #ParcentNotation['%q{\n  catch(:foo){\n    throw :foo, false\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{}']
            $expression: #ParcentNotation['%q{\n  catch(:foo){\n    throw :foo, nil\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  catch(:foo){\n    throw :foo, :ok\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{}']
            $expression: #ParcentNotation['%q{\n  catch(:foo){\n    1.times{\n      throw :foo\n    }\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  catch(:foo){\n    1.times{\n      throw :foo, :ok\n    }\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  catch(:foo){\n    catch(:bar){\n      throw :foo, :ok\n    }\n    :ng\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  catch(:foo){\n    catch(:bar){\n      1.times{\n        throw :foo, :ok\n      }\n    }\n    :ng\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{2}']
            $expression: #ParcentNotation['%q{\n  module Enumerable\n    def all_?\n      self.each{|e|\n        unless yield(e)\n          return false\n        end\n      }\n      true\n    end\n  end\n\n  xxx = 0\n  [1,2].each{|bi|\n    [3,4].each{|bj|\n      [true, nil, true].all_?{|be| be}\n      break\n    }\n    xxx += 1\n  }\n  xxx\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield\n  end\n\n  m{\n    begin\n    ensure\n      break :ok\n    end\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield\n    :ok\n  end\n  i=0\n  m{\n    if i>10\n      i*i\n    else\n      i+=1\n      next\n    end\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield\n  end\n\n  m{\n    next :ok\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{131}']
            $expression: #ParcentNotation['%q{\n  def m\n    yield + 10\n  end\n  i=0\n  m{\n    if i>10\n      i*i\n    else\n      i+=1\n      redo\n    end\n  }\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\nbegin\n  eval %q{\n    1.times{\n      retry\n    }\n  }\nrescue SyntaxError\n  :ok\nend\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{3}']
            $expression: #ParcentNotation['%q{\n  def m\n    return 3\n  end\n  m\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  def m\n    :ng1\n    mm{\n      return :ok\n    }\n    :ng2\n  end\n\n  def mm\n    :ng3\n    yield\n    :ng4\n  end\n  m\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{100}']
            $expression: #ParcentNotation['%q{\n  $i = 0\n  def m\n    begin\n      iter{\n        return\n      }\n    ensure\n      $i = 100\n    end\n  end\n\n  def iter\n    yield\n  end\n  m\n  $i\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{ok}']
            $expression: #ParcentNotation['%q{\n  def m\n    begin\n      raise\n    rescue\n      return :ok\n    end\n    :ng\n  end\n  m\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{1}']
            $expression: #ParcentNotation['%q{\n  def m\n    begin\n      raise\n    rescue\n      return 1\n    end\n  end\n\n  m\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #ParcentNotation['%q{1}']
            $expression: #ParcentNotation['%q{\n  def m\n    begin\n      #\n    ensure\n      return 1\n    end\n  end\n\n  m\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['ok']
            $expression: #ParcentNotation['%q{\n  begin\n    catch {|t| throw t, :ok }\n  rescue ArgumentError\n    :ng\n  end\n}']
            $expression: #StringExpr['[ruby-dev:31609]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['1']
            $expression: #ParcentNotation['%q{\n  catch do |t|\n    begin\n      throw t, 1\n      2\n    ensure\n      3\n    end\n  end\n}']
            $expression: #StringExpr['[ruby-dev:31698]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_normal_exit']
         $param: #List[
            $expression: #ParcentNotation['%q{\n  f = 0\n  1.times do\n    begin\n      f += 1\n    ensure\n      redo unless f > 2\n    end\n  end\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_normal_exit']
         $param: #List[
            $expression: #ParcentNotation['%q{\n  -> do\n    1.times do\n      begin\n        raise\n      rescue\n        return\n      end\n    end\n  end.call\n}']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_normal_exit']
         $param: #List[
            $expression: #ParcentNotation['%q{\n  while true\n    begin\n      raise\n      next\n    rescue\n    end\n    break\n  end\n}']
            $expression: #StringExpr['[ruby-core:28172]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['true']
            $expression: #ParcentNotation['%q{\n  class Object\n    def return_eigenclass\n      class << self\n        return self\n      end\n    end\n  end\n  s = "foo"\n  s.return_eigenclass == class << s; self; end\n}']
            $expression: #StringExpr['[ruby-core:21379]']
         ]
      ]
      $statement: #ApplyExpr[
         #Self['self']
         $recv: #NameExpr['assert_equal']
         $param: #List[
            $expression: #StringExpr['true']
            $expression: #ParcentNotation['%q{\n  class Object\n    def yield_eigenclass\n      class << self\n        yield self\n      end\n    end\n  end\n  s = "foo"\n  s.yield_eigenclass {|c| c == class << s; self; end }\n}']
            $expression: #StringExpr['[ruby-dev:40975]']
         ]
      ]
   ]
   #Comsumed['comsumed']
]
